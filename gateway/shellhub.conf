server {
    listen 80{{ if bool (env.Getenv "SHELLHUB_PROXY") }} proxy_protocol{{ end }};
    {{ if bool (env.Getenv "SHELLHUB_PROXY") }}
    set_real_ip_from ::/0;
    real_ip_header proxy_protocol;
    {{ end }}
    server_name _;

    location / {
        resolver 127.0.0.11 ipv6=off valid=10s;
        proxy_pass http://ui:8080;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location /api {
        resolver 127.0.0.11 ipv6=off valid=10s;
        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        error_page 500 =401 /auth;
        rewrite ^/api/(.*)$ /api/$1 break;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_pass http://api:8080;
    }

    location /ssh/connection {
        resolver 127.0.0.11 ipv6=off valid=10s;
        auth_request /auth;
        auth_request_set $device_uid $upstream_http_x_device_uid;
        proxy_pass http://ssh:8080;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        {{ if bool (env.Getenv "SHELLHUB_PROXY") -}}
        proxy_set_header X-Real-IP $proxy_protocol_addr;
        {{ else -}}
        proxy_set_header X-Real-IP $remote_addr;
        {{ end -}}
        proxy_set_header X-Device-UID $device_uid;
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location /ssh/revdial {
        resolver 127.0.0.11 ipv6=off valid=10s;
        proxy_pass http://ssh:8080;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        {{ if bool (env.Getenv "SHELLHUB_PROXY") -}}
        proxy_set_header X-Real-IP $proxy_protocol_addr;
        {{ else -}}
        proxy_set_header X-Real-IP $remote_addr;
        {{ end -}}
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location ~* /api/sessions/(.*)/close {
        resolver 127.0.0.11 ipv6=off valid=10s;
        auth_request /auth;
        auth_request_set $tenant_id $upstream_http_x_tenant_id;
        error_page 500 =401 /auth;
        rewrite ^/api/(.*)$ /$1 break;
        proxy_set_header X-Tenant-ID $tenant_id;
        proxy_pass http://ssh:8080;
    }

    location /api/devices/auth {
        resolver 127.0.0.11 ipv6=off valid=10s;
        auth_request off;
        rewrite ^/api/(.*)$ /api/$1 break;
        proxy_pass http://api:8080;
    }

    location /api/login {
        resolver 127.0.0.11 ipv6=off valid=10s;
        auth_request off;
        rewrite ^/api/(.*)$ /api/$1 break;
        proxy_pass http://api:8080;
    }

    location /auth {
        resolver 127.0.0.11 ipv6=off valid=10s;
        internal;
        rewrite ^/(.*)$ /internal/$1 break;
        proxy_pass http://api:8080;
    }

    location /ws {
        resolver 127.0.0.11 ipv6=off valid=10s;
        rewrite ^/ws/(.*)$ /api/ws/$1 break;
        proxy_pass http://api:8080;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host $host;
        {{ if bool (env.Getenv "SHELLHUB_PROXY") -}}
        proxy_set_header X-Real-IP $proxy_protocol_addr;
        {{ else -}}
        proxy_set_header X-Real-IP $remote_addr;
        {{ end -}}
        proxy_http_version 1.1;
        proxy_cache_bypass $http_upgrade;
        proxy_redirect off;
    }

    location /info {
        default_type application/json;

        content_by_lua_block {
            local host=ngx.var.http_host
            local ssh_port=os.getenv("SHELLHUB_SSH_PORT")
            local version=os.getenv("SHELLHUB_VERSION")
            local json = require('cjson')
            local data = {version=version, endpoints={api=host, ssh=host .. ":" .. ssh_port}}
            ngx.say(json.encode(data))
        }
    }

    location /install.sh {
        default_type "text/x-shellscript";

        content_by_lua_block {
            local host=ngx.var.http_host
            local scheme = ngx.var.http_x_forwarded_proto ~= '' and ngx.var.http_x_forwarded_proto or ngx.var.scheme
            local tenant_id=ngx.var.arg_tenant_id
            local version=os.getenv("SHELLHUB_VERSION")
            ngx.say("docker run -d --name=shellhub --restart=unless-stopped --privileged --net=host --pid=host -v /:/host -e SERVER_ADDRESS=",scheme,"://",host," -e PRIVATE_KEY=/host/etc/shellhub.key -e TENANT_ID=",tenant_id," shellhubio/agent:",version)
        }
    }
}
